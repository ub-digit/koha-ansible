---
- hosts: all
  vars_files:
    - vars/defaults.yml
    - vars/vault.yml
  become: true
  become_user: root
  tasks:
    - name: Set koha_conf_dir
      set_fact:
        koha_conf_dir: "/etc/koha/sites/{{ koha_instance_name }}"

    - name: Check for instance existence
      ansible.builtin.shell: koha-list | grep {{ koha_instance_nameÂ }}
      register: result
      ignore_errors: yes

    - name: Write apache site config template if creating new instance so koha-create doesn't complain
      ansible.builtin.template:
        src: apache-site.conf.in.j2
        dest: /etc/koha/apache-site.conf.in
      when: result.stdout == ""

    - name: Write koha configuration template if creating new instance so koha-create doesn't complain
      ansible.builtin.template:
        src: koha-conf-site.xml.in.j2
        dest: "/etc/koha/koha-conf-site.xml.in"
      notify: restart memcached

    - name: Create Koha instance
      ansible.builtin.command: koha-create --use-db --memcached-servers {{ koha_memcached_servers }} --dbhost {{ koha_db_host }} --database koha_{{ koha_instance_name }} --elasticsearch-server {{ koha_elasticsearch_server }} {{ koha_instance_name }}
      when: result.stdout == ""
      notify: restart apache

    - name: Ensure apache site configuration
      ansible.builtin.template:
        src: apache-site.conf.in.j2
        dest: "/etc/apache2/sites-enabled/{{ koha_instance_name }}.conf"
      notify: restart apache

    - name: Ensure koha configuration
      ansible.builtin.template:
        src: koha-conf-site.xml.in.j2
        dest: "/etc/koha/sites/{{ koha_instance_name }}/koha-conf.xml"
      notify: restart memcached

    - name: Touch sip.enabled to emulate koha-sip --enable
      ansible.builtin.file:
        path: "/var/lib/koha/{{ koha_instance_name }}/sip.enabled"
        owner: "{{ koha_instance_name }}-koha"
        group: "{{ koha_instance_name }}-koha"
        state: touch

    - name: Ensure SIP-server configuration
      ansible.builtin.template:
        src: SIPconfig.xml.j2
        dest: "/etc/koha/sites/{{ koha_instance_name }}/SIPconfig.xml"
      tags:
      - sip
      notify: restart sip

    - name: Create empty log files with the correct owner
      ansible.builtin.file:
        mode: 0644
        path: "/var/log/koha/{{ koha_instance_name }}/{{ item }}"
        owner: "{{ koha_instance_name }}-koha"
        group: "{{ koha_instance_name }}-koha"
        state: touch
      loop:
        - intranet-error.log
        - opac-error.log

    - name: Replace DocumentRoot path in apache-shared-intranet.conf and apache-shared-opac.conf
      ansible.builtin.replace:
        path: "/etc/koha/{{ item }}"
        regexp: '^DocumentRoot [^ ]+\s*$'
        replace: "DocumentRoot {{ koha_home }}/koha-tmpl"
      loop:
        - apache-shared-intranet.conf
        - apache-shared-opac.conf

    - name: Replace ScriptAlias path in apache-shared-intranet.conf and apache-shared-opac.conf
      ansible.builtin.replace:
        path: "/etc/koha/{{ item }}"
        regexp: '^(ScriptAlias [^ ]+) "[^"]+/cgi-bin/([^"]*)"'
        replace: "\\1 \"{{ koha_home }}/\\2\""
      loop:
        - apache-shared-intranet.conf
        - apache-shared-opac.conf

    - name: Replace API paths in apache-shared-intranet.conf and apache-shared-opac.conf
      ansible.builtin.replace:
        path: "/etc/koha/{{ item }}"
        regexp: '/usr/share/koha/api'
        replace: "{{ koha_home}}/api"
      loop:
        - apache-shared-intranet.conf
        - apache-shared-opac.conf

    - name: Replace PERL5LIB path in apache-shared.conf
      ansible.builtin.replace:
        path: "/etc/koha/apache-shared.conf"
        regexp: '^SetEnv PERL5LIB "[^"]+"\s*$'
        replace: "SetEnv PERL5LIB \"{{ perl5lib_paths }}\""

    - name: Update unmanaged Koha instance config files from current release
      ansible.builtin.copy:
        remote_src: yes
        src: "{{ koha_repo_path }}/debian/templates/{{ item.0 }}"
        dest: "/etc/koha/sites/{{ koha_instance_name }}/{{ item.1 }}"
      loop: "{{ ['log4perl-site.conf.in']|zip(['log4perl.conf'])|list }}"

    - name: Replace __LOG_DIR__ in log4perl.conf
      ansible.builtin.replace:
        dest: "/etc/koha/sites/{{ koha_instance_name }}/log4perl.conf"
        regexp: '__LOG_DIR__'
        replace: "/var/log/koha/{{ koha_instance_name }}"

    - name: Add ansible user to koha instance group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        append: yes
        groups: "{{ koha_instance_name }}-koha"

    # Hack
    - name: Set smtp host in system perl Sendmail.pm
      ansible.builtin.replace:
        path: /usr/share/perl5/Mail/Sendmail.pm
        after: '# \*+ Configuration you may want to change \*+'
        before: '\);\s+# \*+'
        regexp: "^(\\s+'smtp'\\s+=>\\s+).*$"
        replace: '\1[ qw( {{ smtp_host }} ) ],'

    - name: Set smtp port in system perl Sendmail.pm
      ansible.builtin.replace:
        path: /usr/share/perl5/Mail/Sendmail.pm
        after: '# \*+ Configuration you may want to change \*+'
        before: '\);\s+# \*+'
        #regexp: "^(\\s+'port'\\s+=>\\s+).*$"
        #replace: '\1{{ smtp_port }},'
        regexp: "^(\\s+'port'\\s+=>).*$"
        replace: '\1 {{ smtp_port }},' # Weird behavior no space between \1{{ will cause issues

    - name: Ensure cronjobs (cron.d)
      ansible.builtin.template:
        src: koha-common.cron.d.j2
        dest: /etc/cron.d/koha-common

    - name: Ensure cronjobs (cron.daily)
      ansible.builtin.template:
        src: koha-common.cron.daily.j2
        dest: /etc/cron.daily/koha-common
        mode: 0755

    - name: Copy cronjobs (cron.d)
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/files/cron/koha-common.cron.d"
        dest: /etc/cron.d/koha

    # Translation files
    - name: Copy translation files
      ansible.builtin.copy:
        dest: "{{ koha_po_files_path }}"
        src: "{{ playbook_dir }}/files/po/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}" # group?

    # GUB-scripts
    - name: Write /usr/local/sbin/koha-database-backup.sh
      ansible.builtin.template:
        src: koha-database-backup.sh.j2
        dest: /usr/local/sbin/koha-database-backup.sh
        mode: 0544

    - name: Ensure log directory for koha-database-backup.sh
      ansible.builtin.file:
        path: "{{ koha_database_backup_log_dir }}"
        mode: 0755
        state: directory

    - name: Ensure data directory for koha-database-backup.sh
      ansible.builtin.file:
        path: "{{ koha_database_backup_data_dir }}"
        mode: 0755
        state: directory

    - name: Schedule cron job for koha-database-backup.sh
      ansible.builtin.cron:
        name: "koha-database-backup"
        minute: "00"
        hour: "23"
        job: "/usr/local/sbin/koha-database-backup.sh >> {{ koha_database_backup_log_dir }}/backup.log 2>&1"
        state: "{{ 'present' if koha_database_backup_cron_enabled else 'absent' }}"

    - name: Schedule cron job for gub_edifact.pl
      ansible.builtin.cron:
        name: koha-gub-edifact
        minute: "00"
        hour: "22"
        job: "/usr/sbin/koha-shell -c {{ koha_home }}/misc/cronjobs/gub_edifact.pl {{ koha_instance_name }} 2>&1"
        state: "{{ 'present' if gup_edifact_cron_enabled else 'absent' }}"

    - name: Write log config for koha-plugin-marc-import
      ansible.builtin.template:
        src: koha-plugin-marc-import-log4perl.conf.j2
        dest: "/etc/koha/sites/{{ koha_instance_name }}/koha-plugin-marc-import-log4perl.conf"

    # Hack to install from git reposity, works but ugly as hell
    # TODO: checkout as ansible_user to be consistent?
    - name: Checkout MimeMailSender repo, required by marc import plugin
      ansible.builtin.git:
        repo: https://github.com/ub-digit/Log-Dispatch-Email-MimeMailSender.git
        dest: "/home/{{ ansible_user}}/Log-Dispatch-Email-MimeMailSender"
        version: master

    - name: Inject MIMEMailSender in perl lib path
      ansible.builtin.file:
        src: "/home/{{ ansible_user}}/Log-Dispatch-Email-MimeMailSender/lib/Log/Dispatch/Email/MIMEMailSender.pm"
        dest: "/usr/share/perl5/Log/Dispatch/Email/MIMEMailSender.pm"
        state: link

    - name: Ensure koha background worker init script
      ansible.builtin.template:
        src: koha-background-worker.service.j2
        dest: "/etc/systemd/system/koha-background-worker.service"
      notify: reload systemd
      when: environment_name != 'devbox'

    - name: Ensure background worker enabled and started
      ansible.builtin.systemd:
        name: koha-background-worker
        enabled: yes
        state: started
      when: environment_name != 'devbox'

    - name: Ensure plack is running
      ansible.builtin.shell:
        cmd: ". /usr/sbin/koha-functions.sh && if ! is_plack_running {{ koha_instance_name }}; then koha-plack --start {{ koha_instance_name }}; fi"
      when: plack

  handlers:
    # remove become: yes?
    - name: restart sip
      ansible.builtin.shell:
        cmd: ". /usr/sbin/koha-functions.sh && if is_sip_running {{ koha_instance_name }}; then koha-sip --restart {{ koha_instance_name }}; else koha-sip --start {{ koha_instance_name }}; fi"
      become: yes
      when: sip
    - name: restart plack # Currently unused and untested
      ansible.builtin.shell:
        cmd: ". /usr/sbin/koha-functions.sh && if is_plack_running {{ koha_instance_name }}; then koha-plack --restart {{ koha_instance_name }}; else koha-plack --start {{ koha_instance_name }}; fi"
      become: yes
      when: plack
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: restart apache
      ansible.builtin.service:
        name: apache2
        state: restarted
      become: yes
    - name: restart memcached
      ansible.builtin.service:
        name: memcached
        state: restarted
      become: yes
